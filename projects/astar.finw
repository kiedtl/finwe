(use* core)
(use* varvara)
(use std)
(use vec)
(use dampe)
(use alloc)

(enum Dir U8 [n 0] [s 1] [e 2] [w 3] [nw 4] [ne 5] [sw 6] [se 7])

#(method Dir) (word diag? (Dir -- Bool) [
	(as U8) 4 >=
])

(test Dir/diag? [
	.Dir/s  ;diag? (should eq nil) .Dir/n  ;diag? (should eq nil)
	.Dir/e  ;diag? (should eq nil) .Dir/w  ;diag? (should eq nil)
	.Dir/se ;diag? (should eq t)   .Dir/ne ;diag? (should eq t)
	.Dir/sw ;diag? (should eq t)   .Dir/nw ;diag? (should eq t)
])

#(method Dir) (word print (Dir -- ) [
	(cond
		[ .Dir/n  = ] [ "N " ]
		[ .Dir/s  = ] [ "S " ]
		[ .Dir/e  = ] [ "E " ]
		[ .Dir/w  = ] [ "W " ]
		[ .Dir/ne = ] [ "NE" ]
		[ .Dir/nw = ] [ "NW" ]
		[ .Dir/se = ] [ "SE" ]
		[ .Dir/sw = ] [ "SW" ]
	)
	print-string
	drop
])

#(method Dir) (word move (Coord Dir -- Coord) [
	move (split U8 U8)
	(cond
		[ (-- Bool) (r copy) .Dir/n  = ] [  1-              ]
		[ (-- Bool) (r copy) .Dir/s  = ] [  1+              ]
		[ (-- Bool) (r copy) .Dir/e  = ] [  swap 1+ swap    ]
		[ (-- Bool) (r copy) .Dir/w  = ] [  swap 1- swap    ]
		[ (-- Bool) (r copy) .Dir/ne = ] [  1- swap 1+ swap ]
		[ (-- Bool) (r copy) .Dir/nw = ] [  1- swap 1- swap ]
		[ (-- Bool) (r copy) .Dir/se = ] [  1+ swap 1+ swap ]
		[ (-- Bool) (r copy) .Dir/sw = ] [  1+ swap 1- swap ]
	)
	(r drop)
	(make Coord)
])

(test Dir/move [
	0 0 (make Coord) .Dir/s ;move (split U8 U8) (should eq 1) (should eq 0)
	3 3 (make Coord) .Dir/n ;move (split U8 U8) (should eq 2) (should eq 3)
	3 3 (make Coord) .Dir/e ;move (split U8 U8) (should eq 3) (should eq 4)
	3 3 (make Coord) .Dir/w ;move (split U8 U8) (should eq 3) (should eq 2)
])

(struct Coord [x U8] [y U8])

// #0000 b1 b2 00 00
// SWP2  00 00 b1 b2
// ROT   00 b1 b2 00
// SWP   00 b2 00 b1
#(method Coord) (word into-shorts ( Coord -- U16 U16 ) [
	(split U8 U8) 0 0
	(wild (--) [(asm "s" .Op/Oswp)])
	(wild (--) [(asm "" .Op/Orot)])
	(wild (--) [(asm "" .Op/Oswp)])
	(wild (U8 U8 U8 U8 -- U16 U16) [])
])

#(method Coord) (word print ( Coord -- ) [
	(split U8 U8) swap "(" print-string print-dec ", " print-string print-dec ")" print-string
])

#(method Coord) (word eq? (Coord Coord -- Bool) [ (as U16 U16) = ])

#(method Coord) (word at (@[[Any 50] 30] Coord -- @(Child (Child $1))) [
	(split U8 U8) rot-sbb : : (as @(Child (Child $1)))
])

#(method Coord) (word distance (Coord Coord -- U16) [
	(wild ( Coord Coord -- U8 U8 U8 U8 ) [])   // x y x y
	rot                                        // x x y y
	- (as I8) abs (as U16) move                // x x | abs(y-y)
	- (as I8) abs (as U16) (r move)            // abs(x-x) abs(y-y)
	+
])

(test Coord/distance [
	0 0 (make Coord) 0 1 (make Coord) ;distance (should eq 1s)
	0 0 (make Coord) 1 1 (make Coord) ;distance (should eq 2s)
	0 9 (make Coord) 0 0 (make Coord) ;distance (should eq 9s)
])

(struct Node
	[came-from Coord]
	[unvisited Bool]
)

// ( accumulate-func start end -- path )
(word astar (@(Fn (Coord -- )) Coord Coord -- Bool) [
	(let nodes [[Node 50] 30])
	(let g-score [[U16 50] 30])
	(let open-list (Of vec/Vector Coord))
	(let f-score [[U16 50] 30])
	(let goal Coord)

	(word get-current ( -- Coord ) [
		(let best-fscore U16)
		(let best-index U16)

		0xFFs @best-fscore <-
		@open-list :len -> @best-index <-
	
		@open-list :len ->
		(while [ 0<> ] [
			1-
			dup @open-list :items -> : ->
			@f-score swap ;at ->
			dup $best-fscore < (when [
				@best-fscore <-
				dup @best-index <-
			] [ drop ])
		]) drop

		$best-index @open-list ;swap-remove
		@nodes over ;at :unvisited nil swap-sb <-
	])

	(word in-openlist? ( Coord -- Bool ) [
		@open-list :len ->
		(while [ 0<> ] [
			1-
			dup @open-list :items -> : ->
			rot tuck
			;eq? (when [ 2drop t return ])
			swap
		])
		2drop nil
	])

	// ( current neighbor -- )
	(word check-neighbor ( Coord Dir -- ) [
		move dup (r copy) ;move
		dup (split U8 U8) 30 >= swap 50 >= or (when [2drop (r drop) return])
		@nodes over ;at :unvisited -> not (when [2drop (r drop) return])
		@MAP over ;at -> '. <> (when [2drop (r drop) return])

		// tenative_gscore = gscore[current] + cost
		over @g-score swap ;at ->
		(r move) ;diag? (when [2s] [1s]) + // ( current neighbor newg )
		over @g-score swap ;at -> tuck> <  // ( current neighbor newg newg<oldg? )

		(when [
			over @g-score swap ;at tuck> <-
			// ( current neighbor g )
			// fscore = gscore + distance(goal, neighbor)
			over $goal ;distance +
			over @f-score swap ;at <-
			// ( current neighbor )
			dup in-openlist? not (when [ dup @open-list ;append ])
			@nodes swap ;at :came-from <-
		] [ 3drop ])
	])

	0xFF (sizeof [[Node 50] 30]) @nodes std/memset8
	0xFF (sizeof [[U16  50] 30]) @g-score std/memset8
	0xFF (sizeof [[U16  50] 30]) @f-score std/memset8

	over @g-score swap ;at 0s -<
	2dup ;distance over @f-score swap ;at <-

	@open-list vec/init
	swap @open-list ;append

	@goal <-

	(while [ ( -- Bool ) @open-list :len -> 0<> ] [
		get-current
		dup $goal ;eq? (when [
			@open-list ;deinit
			@nodes swap ;at :came-from ->
			(while [ 0xFF 0xFF (make Coord) ;eq? not ] [
				2dup swap do
				@nodes swap ;at :came-from ->
			])
			drop
			$goal swap do
			t return
		])
		// unrolled loop
		dup .Dir/n  check-neighbor dup .Dir/s  check-neighbor
		dup .Dir/e  check-neighbor dup .Dir/w  check-neighbor
		dup .Dir/ne check-neighbor dup .Dir/nw check-neighbor
		dup .Dir/se check-neighbor     .Dir/sw check-neighbor
	])

	drop
	nil
])

(let buf (Of vec/Vector Coord))

(word get-path ( Coord -- ) [
	(let cache Coord)

	dup $cache ;eq? (when [ drop return ])
	@cache <-

	@buf ;deinit
	alloc/defrag
	@buf vec/init

	[ (Coord -- ) @buf ;append ]
		1 1 (make Coord) $cache
		astar
	drop
])

(word highlight-coord (Coord -- ) [
	;into-shorts 2dup
	8s * .Screen/y deo
	8s * .Screen/x deo
	@MAP : : -> draw-char-inverse
])

(word draw ( -- ) [
	draw-map
	draw-path
	draw-mouse
])

(word draw-map ( -- ) [
	0x1 .Screen/auto deo

	(let anchorx U16 [0])
	(let anchory U16 [0])

	0s dup @anchorx <- .Screen/x deo
	0s dup @anchory <- .Screen/y deo

	0 (until [ 30 = ] [
		0s dup @anchorx <- .Screen/x deo

		0 (until [ 50 = ] [
			2dup swap @MAP : : -> draw-char

			$anchorx 8s + dup @anchorx <- .Screen/x deo
			1+
		])
		drop

		$anchory 8s + dup @anchory <- .Screen/y deo
		1+
	]) drop
])

(word draw-char (U8 -- ) [
	set-glyph-addr
	0x04 .Screen/sprite deo
])

(word draw-char-inverse (U8 -- ) [
	set-glyph-addr
	0x01 .Screen/sprite deo
])

(word draw-mouse ( -- ) [
	(let oldx U16)
	(let oldy U16)

	0x0 .Screen/auto deo

	$oldx .Screen/x deo
	$oldy .Screen/y deo
	@MOUSE .Screen/addr deo
	0x40 .Screen/sprite deo

	.Mouse/x dei dup @oldx <- .Screen/x deo
	.Mouse/y dei dup @oldy <- .Screen/y deo

	0x41 .Screen/sprite deo
])

(word set-glyph-addr (U8 -- ) [
	32 - @FONT : .Screen/addr deo
])

(struct Sprite8 [data [U8 8]])

(word draw-path ( -- ) [
	0s
	(while [ @buf :len -> < ] [
		dup @buf :items -> : -> highlight-coord
		1+
	]) drop
])

(word on-frame ( -- ) [ ])

(word on-mouse ( -- ) [
	.Mouse/state dei 0= (when [
		draw
		// Movement
		.Mouse/x dei 8s / (as U8)
		.Mouse/y dei 8s / (as U8)
		(make Coord) get-path
	] [
		// Button press
	])
])

(word main [
	[ (--) halt ] .Screen/vector deo
	[ (--) on-mouse halt ] .Mouse/vector deo

	alloc/init
	@buf vec/init

	0x100s (as @Opaque) here-statics 0x100s - dampe/protect

	0xf07fs .System/r deo
	0xf0e0s .System/g deo
	0xf0c0s .System/b deo

	50s 8s * .Screen/width deo
	30s 8s * .Screen/height deo
])

// Taken from left
(let MOUSE Sprite8 [
	0x80c0s 0xe0f0s 0xf8e0s 0x1000s
])

// atari8
(let FONT [Sprite8] [
	0x0000s 0x0000s 0x0000s 0x0000s 0x6060s 0x6060s 0x6000s 0x6000s
	0x6666s 0x6600s 0x0000s 0x0000s 0x006cs 0xfe6cs 0x6cfes 0x6c00s
	0x183es 0x603cs 0x067cs 0x1800s 0x0066s 0x6c18s 0x3066s 0x4600s
	0x386cs 0x3870s 0xdeccs 0x7600s 0x6060s 0x6000s 0x0000s 0x0000s
	0x1c30s 0x3030s 0x3030s 0x1c00s 0x380cs 0x0c0cs 0x0c0cs 0x3800s
	0x0066s 0x3cffs 0x3c66s 0x0000s 0x0018s 0x187es 0x1818s 0x0000s
	0x0000s 0x0000s 0x0030s 0x3060s 0x0000s 0x007es 0x0000s 0x0000s
	0x0000s 0x0000s 0x0018s 0x1800s 0x0306s 0x0c18s 0x3060s 0xc000s
	0x3c66s 0x6e76s 0x6666s 0x3c00s 0x1838s 0x1818s 0x1818s 0x7e00s
	0x3c66s 0x060cs 0x1830s 0x7e00s 0x7e0cs 0x180cs 0x0666s 0x3c00s
	0x0c1cs 0x3c6cs 0x7e0cs 0x0c00s 0x7e60s 0x7c06s 0x0666s 0x3c00s
	0x3c60s 0x607cs 0x6666s 0x3c00s 0x7e06s 0x0c18s 0x3030s 0x3000s
	0x3c66s 0x663cs 0x6666s 0x3c00s 0x3c66s 0x663es 0x060cs 0x3800s
	0x0018s 0x1800s 0x0018s 0x1800s 0x0018s 0x1800s 0x1818s 0x3000s
	0x0c18s 0x3060s 0x3018s 0x0c00s 0x0000s 0x7e00s 0x007es 0x0000s
	0x3018s 0x0c06s 0x0c18s 0x3000s 0x3c66s 0x060cs 0x1800s 0x1800s
	0x3c66s 0x6e6as 0x6e60s 0x3e00s 0x183cs 0x6666s 0x7e66s 0x6600s
	0x7c66s 0x667cs 0x6666s 0x7c00s 0x3c66s 0x6060s 0x6066s 0x3c00s
	0x786cs 0x6666s 0x666cs 0x7800s 0x7e60s 0x607cs 0x6060s 0x7e00s
	0x7e60s 0x607cs 0x6060s 0x6000s 0x3e60s 0x606es 0x6666s 0x3e00s
	0x6666s 0x667es 0x6666s 0x6600s 0x3c18s 0x1818s 0x1818s 0x3c00s
	0x3e06s 0x0606s 0x0666s 0x3c00s 0x666cs 0x7870s 0x786cs 0x6600s
	0x6060s 0x6060s 0x6060s 0x7e00s 0xc6ees 0xfed6s 0xc6c6s 0xc600s
	0x6676s 0x7e7es 0x6e66s 0x6600s 0x3c66s 0x6666s 0x6666s 0x3c00s
	0x7c66s 0x667cs 0x6060s 0x6000s 0x3c66s 0x6666s 0x766cs 0x3600s
	0x7c66s 0x667cs 0x6c66s 0x6600s 0x3c66s 0x603cs 0x0666s 0x3c00s
	0x7e18s 0x1818s 0x1818s 0x1800s 0x6666s 0x6666s 0x6666s 0x3e00s
	0x6666s 0x6666s 0x663cs 0x1800s 0xc6c6s 0xc6d6s 0xfeees 0xc600s
	0x6666s 0x3c18s 0x3c66s 0x6600s 0x6666s 0x663cs 0x1818s 0x1800s
	0x7e06s 0x0c18s 0x3060s 0x7e00s 0x3c30s 0x3030s 0x3030s 0x3c00s
	0xc060s 0x3018s 0x0c06s 0x0300s 0x3c0cs 0x0c0cs 0x0c0cs 0x3c00s
	0x1038s 0x6cc6s 0x0000s 0x0000s 0x0000s 0x0000s 0x0000s 0xfe00s
	0x0060s 0x3018s 0x0000s 0x0000s 0x0000s 0x3c06s 0x3e66s 0x3e00s
	0x6060s 0x7c66s 0x6666s 0x7c00s 0x0000s 0x3c60s 0x6060s 0x3c00s
	0x0606s 0x3e66s 0x6666s 0x3e00s 0x0000s 0x3c66s 0x7e60s 0x3c00s
	0x1c30s 0x7c30s 0x3030s 0x3000s 0x0000s 0x3e66s 0x663es 0x067cs
	0x6060s 0x7c66s 0x6666s 0x6600s 0x1800s 0x3818s 0x1818s 0x3c00s
	0x1800s 0x1818s 0x1818s 0x1870s 0x6060s 0x666cs 0x786cs 0x6600s
	0x3818s 0x1818s 0x1818s 0x3c00s 0x0000s 0xecfes 0xd6c6s 0xc600s
	0x0000s 0x7c66s 0x6666s 0x6600s 0x0000s 0x3c66s 0x6666s 0x3c00s
	0x0000s 0x7c66s 0x6666s 0x7c60s 0x0000s 0x3e66s 0x6666s 0x3e06s
	0x0000s 0x7c66s 0x6060s 0x6000s 0x0000s 0x3e60s 0x3c06s 0x7c00s
	0x0018s 0x7e18s 0x1818s 0x0e00s 0x0000s 0x6666s 0x6666s 0x3e00s
	0x0000s 0x6666s 0x663cs 0x1800s 0x0000s 0xc6c6s 0xd67cs 0x6c00s
	0x0000s 0x663cs 0x183cs 0x6600s 0x0000s 0x6666s 0x663es 0x067cs
	0x0000s 0x7e0cs 0x1830s 0x7e00s 0x1c30s 0x3060s 0x3030s 0x1c00s
	0x1818s 0x1818s 0x1818s 0x1818s 0x380cs 0x0c06s 0x0c0cs 0x3800s
	0x0000s 0x60f2s 0x9e0cs 0x0000s 0x3c42s 0x9985s 0x8599s 0x423cs
])

(let MAP [[U8 51] 30] [
	"#...............................................##"
	"..######.........................................#"
	"..#....#........#####............................."
	"..#....#............##.#####################......"
	"..#....#.....#......#......................#......"
	"..######.....#......#......................#......"
	".............#......#......................#......"
	".............#......#......................#......"
	"......########......#......................#......"
	"....................#......................#......"
	"....................############...........#......"
	"....................#..........#...........#......"
	"....................#..........#...........#......"
	".....#......####....#..........#...........#......"
	".....#......#..#....#..........#....#......#......"
	".....#......#..#....#..........#...###.....#......"
	".....#......#..#....#..........#..##.##....#......"
	".....#......####....#..........#.##...##...#......"
	"....................#..........#..##.##....#......"
	"....................#..........#...#.#.....#......"
	"................#####..........#...........#......"
	"...............................#...........#......"
	".....#.........................#############......"
	".....#...#######..............................#.#."
	"........###...###..........................#..#.#."
	"........#.......#................######....#..###."
	"........#.......#................#....#....#..#.#."
	"........##.....##................#....#....#..#.#."
	"#........###.###.................######..........."
	"##...............................................#"
])
