(typealias AnySigned (AnySet I8 I16))

#inline (word do  [ (asm "s" .Op/Ojsr)                                        ])
#inline (word dip [ swap move do (r move)                                     ])
#inline (word sip [ swap-bs copy swap-sb do (r move)                          ])
//#inline (word bi  [ [sip] dip do                                            ])
//#inline (word bi* [ [dip] dip do                                            ])
//#inline (word bi& [ dup bi*                                                 ])

// do  (     AnyFn -- (Effects $0 [...]))
// sip ( Any AnyFn -- (Effects $0 [ $1 ... ]) $1)

(test do [
	[ (-- U8 U8 U8) 1 2 3 ] do
	(should eq 3) (should eq 2) (should eq 1)
])

(test sip [
	12 [ (U8 -- U8) 2 * ] sip
	(should eq 12) (should eq 24)
])

//(test bi& [
//	2 8 [ dup * ] bi&
//	(should eq 64) (should eq 4)
//])

#inline (word copy (    Any -- $0 | -- $0   ) [ (asm "kg" .Op/Osth)          ])
#inline (word move (    Any --    | -- $0   ) [ (asm "g" .Op/Osth)           ])

#inline (word halt (        --              ) [ (asm "" .Op/Obrk)            ])

(word lda  (       AnyPtr16 -- (Child $0)   ) [ (asm "g" .Op/Olda) (as (Child $0)) ])
(word ldak (       AnyPtr16 -- $0 (Child $0)) [ (asm "kg" .Op/Olda)          ])
(word sta  (   Any AnyPtr16 --              ) [ (asm "g" .Op/Osta)           ])
(word stak (   Any AnyPtr16 -- $1 $0        ) [ (asm "kg" .Op/Osta)          ])
(word <-   ((Child $0) AnyPtr16 --          ) [ sta                          ])
(word -<   (AnyPtr16 (Child $1) --          ) [ swap sta                     ])
(word ->   (AnyPtr16        -- (Child $0)   ) [ lda                          ])

(word nip   ((AnySz $0) Any -- $0           ) [ (asm "g" .Op/Onip)           ])
(word dup   (           Any -- $0 $0        ) [ (asm "g" .Op/Odup)           ])
(word swap  ((AnySz $0) Any -- $0 $1        ) [ (asm "g" .Op/Oswp)           ])
(word drop  (           Any --              ) [ (asm "g" .Op/Opop)           ])
(word 2drop (       Any Any --              ) [ drop drop                    ])
(word 3drop (   Any Any Any --              ) [ drop drop drop               ])
(word over  ((AnySz $0) Any -- $1 $0 $1     ) [ (asm "g" .Op/Oovr)           ])
(word 2dup  ((AnySz $0) Any -- $1 $0 $1 $0  ) [ over over                    ])

(word rot   ((AnySz $0) (AnySz $0) Any -- $1 $0 $2) [ (asm "g" .Op/Orot)     ])
(word rot>  ((AnySz $0) (AnySz $0) Any -- $0 $0 $0) [ rot rot                ])
(word tuck  ((AnySz $0) Any -- $0 $1 $0     ) [ swap over                    ])
(word tuck> ((AnySz $0) Any -- $1 $1 $0     ) [ over swap                    ])

//(word merge (Any8 Any8 Type -- $0           ) [ (wild ($2 $1 -- $0) [])  ])

(word sext  (I8 -- I16) [
	dup 0x7f > (as U8) 0xff * swap (wild (U8 I8 -- I16) [])
])


// TODO (waitfor dumper) [rot signb swap signb <> ...] might be smaller than
// using ret stack

(word < ( $0 AnySigned -- Bool ) [
	2dup (as (USz $0) (USz $0)) < move
	signb swap signb <>
	(r move) swap
	(when [ not ])
])

(word > ( $0 AnySigned -- Bool ) [
	2dup (as (USz $0) (USz $0)) > move
	signb swap signb <>
	(r move) swap
	(when [ not ])
])

// https://wiki.xxiivv.com/site/uxntal_signed.html
(word abssign ( AnySigned -- (USz $0) (USz $0) ) [
	dup neg? (as (USz $0)) 0xfffes (as (USz $0)) * 1+
	copy * (r move)
])


// Ported from XXIIVV
// https://wiki.xxiivv.com/site/uxntal_signed.html
(word / ($0 AnySigned -- $0) [
// Ported from XXIIVV
	abssign move swap
	abssign move swap
	/ (r [* move]) * (as $0)
])

(word band  ((AnySz $0) Any -- $0           ) [ (asm "g" .Op/Oand)           ])
(word bor   ((AnySz $0) Any -- $0           ) [ (asm "g" .Op/Oora)           ])
(word beor  ((AnySz $0) Any -- $0           ) [ (asm "g" .Op/Oeor)           ])
(word bsft  (       Any  U8 -- (USz $1)     ) [ (asm "g" .Op/Osft)           ])
// TODO: warn if bshr/bshl arg is higher than 7
// #(warn arg-gt $0 7)
(word bshr  (       Any  U8 -- $1           ) [ bsft                         ])
(word bnot  (           Any -- $0           ) [ 0xFFFFs (as $0) beor         ])
(word =     ((AnySz $0) Any -- Bool         ) [ (asm "g" .Op/Oequ)           ])
(word <>    ((AnySz $0) Any -- Bool         ) [ (asm "g" .Op/Oneq)           ])
(word nil?  (          Bool -- Bool         ) [ nil =                        ])
(word T?    (          Bool -- Bool         ) [ T =                          ])
(word <     ((AnySz $0) Any -- Bool         ) [ (asm "g" .Op/Olth)           ])
(word >     ((AnySz $0) Any -- Bool         ) [ (asm "g" .Op/Ogth)           ])
(word <=    ((AnySz $0) Any -- Bool         ) [ > not                        ])
(word >=    ((AnySz $0) Any -- Bool         ) [ < not                        ])
(word +     ((AnySz $0) Any -- $0           ) [ (asm "g" .Op/Oadd)           ])
(word 1+    (           Any -- $0           ) [ (asm "g" .Op/Oinc)           ])
(word 1-    (           Any -- $0           ) [ 1 (as $0) -                  ])
(word -     ((AnySz $0) Any -- $0           ) [ (asm "g" .Op/Osub)           ])
(word /     ((AnySz $0) Any -- $0           ) [ (asm "g" .Op/Odiv)           ])
(word mod   ((AnySz $0) Any -- $0           ) [ 2dup / * -                   ])
(word /mod  ((AnySz $0) Any -- $0 $0        ) [ 2dup / rot> mod              ])
(word *     ((AnySz $0) Any -- $0           ) [ (asm "g" .Op/Omul)           ])
(word 0=    (           Any -- Bool         ) [ 0 (as $0) =                  ])
(word 0<>   (           Any -- Bool         ) [ 0 (as $0) <>                 ])
(word 0<    (           Any -- Bool         ) [ 0 (as $0) <                  ])
(word 0>    (           Any -- Bool         ) [ 0 (as $0) >                  ])
(word signb (            I8 -- U8           ) [ (as U8)  0xf0    band        ])
(word signb (           I16 -- U16          ) [ (as U16) 0xf000s band        ])
(word sign  (            I8 -- U8           ) [ signb             7 bshr     ])
(word sign  (           I16 -- U8           ) [ (split I8 U8) drop sign      ])
// TODO: (max <type>) builtin
(word neg?  (            I8 -- Bool         ) [    0x7f >                    ])
(word neg?  (           I16 -- Bool         ) [ 0x7fffs >                    ])
(word min   (        $0 Any -- $0           ) [ 2dup >= (when [ swap ]) drop ])

(test min [
	  0    1 min (should eq   0)
	  0 0xFF min (should eq   0)
	 23   18 min (should eq  18)
	-1i  38i min (should eq -1i)
])

(test sext [
	   0i sext (should eq 0is)
	   1i sext (should eq 1is)
	 114i sext (should eq 114is)
	 -18i sext (should eq -18is)
	  -8i sext (should eq -8is)
	-127i sext (should eq -127is)
	  -1i sext (should eq -1is)
])

(test <_signed [
	  -1i    1i < (should eq t)
	   1i   -1i < (should eq nil)
	   1i    1i < (should eq nil)
	-121i  121i < (should eq t)
	 121i -121i < (should eq nil)
])

(word abs ( I16 -- U16 ) [ dup dup 0x1f bsft * - ])
(word abs (  I8 -- U8  ) [ dup dup 0x17 bsft * - ])

// TODO: optimize (xor by sign bit? idk)
//(word abs ( I8 -- (USz $0) ) [
//	dup sign 0= (when [(as (USz $0)) return])
//	(as (USz $0)) bnot 1+
//])

(test abs [
	    -1i  abs (should eq 1)
	     1i  abs (should eq 1)
	   -10i  abs (should eq 10)
	   -20i  abs (should eq 20)
	  -125i  abs (should eq 125)
	   125i  abs (should eq 125)
	-22891is abs (should eq 22891s)
	    -1is abs (should eq 1s)
	 22891is abs (should eq 22891s)
	   125is abs (should eq 125s)
])

// TODO: this is stupid... needs to be optimized
// (Probably bake or/and into language to ensure short-circuiting)
(word not   (          Bool -- Bool         ) [ (when [ nil ] [ t ])    ])
(word or    (     Bool Bool -- Bool         ) [ (when [ drop t ]) ])
(word and   (     Bool Bool -- Bool) [ (when [ (when [t] [ nil ]) ] [ drop nil ]) ])

(test or_basic [
	t   nil or (should eq T)
	nil t   or (should eq T)
	t   t   or (should eq T)
	nil nil or (should eq nil)
])

(test and_basic [
	t   nil and (should eq nil)
	nil t   and (should eq nil)
	t   t   and (should eq T)
	nil nil and (should eq nil)
])

(word rot-sbb (Any16 Any8 Any8 -- $1 $0 $2) [
	(wild ($2 $1 $0 -- $1 $0 $2) [ (asm "s" .Op/Oswp)  ])
])

(word rot-sbs (Any16 Any8 Any16 -- $1 $0 $2) [
	// sa0 sa1 bt sb0 sb1
	(wild (--) [ (asm "s" .Op/Osth)  ]) // sa0 sa1 bt | sb0 sb1
	(wild (--) [ (asm "" .Op/Orot)   ]) // sa1 bt sa0 | sb0 sb1
	(wild (--) [ (asm "" .Op/Orot)   ]) // bt sa0 sa1 | sb0 sb1
	(wild (--) [ (asm "rs" .Op/Osth) ]) // bt sb0 sb1 sa0 sa1 
	(wild (--) [ (asm "s" .Op/Oswp)  ]) // bt sa0 sa1 sb0 sb1 
	(wild ($2 $1 $0 -- $1 $0 $2) [])
])

(word rot-bss (Any8 Any16 Any16 -- $1 $0 $2) [
	// bt sa0 sa1 sb0 sb1
	(wild (--) [ (asm "s" .Op/Osth)  ]) // bt sa0 sa1 | sb0 sb1
	(wild (--) [ (asm "" .Op/Orot)   ]) // sa0 sa1 bt | sb0 sb1
	(wild (--) [ (asm "rs" .Op/Osth) ]) // sa0 sa1 bt sb0 sb1
	(wild (--) [ (asm "" .Op/Orot)   ]) // sa0 sa1 sb0 sb1 bt
	(wild ($2 $1 $0 -- $1 $0 $2) [])
])

(word rot-bss> (Any8 Any16 Any16 -- $0 $2 $1) [
	// bt sa0 sa1 sb0 sb1
	(wild (--) [ (asm "s" .Op/Oswp)  ]) // bt sb0 sb1 sa0 sa1
	(wild (--) [ (asm "s" .Op/Osth)  ]) // bt sb0 sb1 | sa0 sa1
	(wild (--) [ (asm "" .Op/Orot)   ]) // sb0 sb1 bt | sa0 sa1
	(wild (--) [ (asm "rs" .Op/Osth) ]) // sb0 sb1 bt sa0 sa1
	(wild ($2 $1 $0 -- $0 $2 $1) [])
])

(word over-sb (Any16 Any8 -- $1 $0 $1) [
	(wild (--) [ 0 ])
	(wild (--) [ (asm "s" .Op/Oovr) ])
	(wild (--) [ (asm "" .Op/Orot)  ])
	(wild (--) [ (asm "" .Op/Opop) ])
	(wild ($1 $0 -- $1 $0 $1) [])
])

(word swap-sb (Any16 Any8 -- $0 $1) [
	(wild (--) [ (asm "" .Op/Orot) ])
	(wild (--) [ (asm "" .Op/Orot) ])
	(wild ($1 $0 -- $0 $1) [])
])

(word swap-bs (Any8 Any16 -- $0 $1) [
	(wild ($1 $0 -- $0 $1) [ (asm "" .Op/Orot) ])
])

(test rot-sbb  [ 2s 1 0  rot-sbb  (should eq 2s) (should eq 0)  (should eq 1)   ])
(test rot-sbs  [ 2s 1 0s rot-sbs  (should eq 2s) (should eq 0s) (should eq 1)   ])
(test rot-bss  [ 2 1s 0s rot-bss  (should eq 2)  (should eq 0s) (should eq 1s)  ])
(test rot-bss> [ 2 1s 0s rot-bss> (should eq 1s) (should eq 2)  (should eq 0s)  ])
(test over-sb  [ 999s 7 over-sb (should eq 999s) (should eq 7) (should eq 999s) ])
(test swap-sb  [ 0xffabs 0xba swap-sb (should eq 0xffabs) (should eq 0xba)      ])
(test swap-bs  [ 0xba 0xffabs swap-bs (should eq 0xba) (should eq 0xffabs)      ])
