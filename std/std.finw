(use* core)
(use* varvara)

(struct Maybe0 (Any) [value $0])//{{{

#(method Maybe0) (word maybe? ((AnyOf Maybe0) -- Bool) [
	:value 0<>
])

#(method Maybe0) (word maybe-not? ((AnyOf Maybe0) -- Bool) [
	:value 0=
])

#(method Maybe0) (word unwrap ((AnyOf Maybe0) -- (FieldType $0 value)) [
       :value
       dup 0= (when [ "Unwrapped 0 value" panic ])
])

#(method Maybe0) (word orelse (
	(FieldType $0 value) (AnyOf Maybe0) -- (FieldType $0 value)
) [
       :value dup 0= (when [ drop ] [ nip ])
])

(test Maybe0/maybe? [ 0 (make (Of Maybe0 U8)) ;maybe? (should eq nil) ])
(test Maybe0/maybe-not? [ 0 (make (Of Maybe0 U8)) ;maybe-not? (should eq t) ])
(test Maybe0/orelse [ 0 (make (Of Maybe0 U8)) 12 swap ;orelse (should eq 12) ])
//}}}

// MaybeFF {{{
// Magic value is 0xFFFF for 2-byte types, 0xFF for 1-byte types
//
(struct MaybeFF (Any) [value $0])

#(method MaybeFF) (word maybe? ((AnyOf MaybeFF) -- Bool) [
	:value  (as (USz (FieldType $0 value)))
	0xFFFFs (as (USz (FieldType $0 value))) <>
])

#(method MaybeFF) (word maybe-not? ((AnyOf MaybeFF) -- Bool) [
	:value  (as (USz (FieldType $0 value)))
	0xFFFFs (as (USz (FieldType $0 value))) =
])

#(method MaybeFF) (word unwrap ((AnyOf MaybeFF) -- (FieldType $0 value)) [
	:value dup
	0xFFFFs (as (FieldType $0 value)) = (when [ "Unwrapped FF value" panic ])
])

#(method MaybeFF) (word orelse ( (FieldType $0 value) (AnyOf MaybeFF) -- (FieldType $0 value)) [
       :value dup 0xFFFFs (as (FieldType $0 value)) = (when [ drop ] [ nip ])
])

(test MaybeFF/maybe? [
	0     (make (Of MaybeFF U8)) ;maybe? (should eq t)
	0xFF  (make (Of MaybeFF U8)) ;maybe? (should eq nil)
	0xFFs (make (Of MaybeFF U16)) ;maybe? (should eq t)
])

(test MaybeFF/maybe-not? [ 0xFF (make (Of MaybeFF U8)) ;maybe-not? (should eq t) ])
(test MaybeFF/orelse [ 0xFF (make (Of MaybeFF U8)) 12 swap ;orelse (should eq 12) ])
//}}}

// FIXME: hundred ways to optimize this, see ;scmp from left project
// Probably have to wait for (r)/move/copy and friends though.
//
(word strequ ( @[Char8] @[Char8] -- Bool ) [
	2dup -> swap-sb ->
	2dup 0= swap 0= and (when [ 2drop 2drop t return ])   // precheck for empty strs
	(until [ drop 2dup 0= swap 0= and ] [
		<> (when [ 2drop nil return ])
		1+ dup -> move           // ( a* b*+ | b-> )
		swap 1+ dup -> (r move)  // ( b*+ a*+ a-> b-> )
	])
	2drop 2drop
	t
])
(test strequ [
	"windows11" "good" strequ          (should eq nil)
	"" "" strequ                       (should eq t)
	"foo" "foo" strequ                 (should eq t)
	"Hail Zig" "Hail Zig\0zags" strequ (should eq t)
	"Hail Zig2" "Hail Zig"      strequ (should eq nil)
	"foo" "" strequ                    (should eq nil)
])

(word strlen ( @[Char8] -- U16 ) [ // TODO: move to str module
	0s swap
	(while [ -> 0<> ] [ swap 1+ swap 1+ ])
	drop
])
(test strlen [
	""                    strlen (should eq  0s)
	"Glory to the Empire" strlen (should eq 19s)
	"Hello, world!"       strlen (should eq 13s)
])

// ( val len ptr -- )
(word memset8 (Any8 U16 AnyPtr16 -- ) [
	(as @U8)
	dup rot + (as @U8)

	(while [ drop 2dup <> ] [
		// ( val ptr end )
		rot-bss>                  // ( end val  ptr  )
		stak                      // ( end val  ptr  )
		1+ rot-sbs                // ( val ptr+ end  )
	])

	3drop
])

// ( len src* dst* -- dst* )
(word memcpy ( U16 $0 AnyPtr -- $0 ) [
	(as @U8 @U8) move (r dup)

	dup rot                        // ( src src len      | dst* dst* )
	(sizeof (Child $0)) (as U16) * // ( src src len*sz   | dst* dst* )
	swap + swap                    // ( src*+len*sz src* | dst* dst* )

	(while [ drop 2dup <> ] [
		dup -> (r copy) <-
		1+ (r 1+)
	])

	(r drop)
	drop drop

	(r move) (as $0)
])
(test memcpy [
	(let foo [Char8 11])
	'X 10s @foo + <-

	"Hail FORTH" dup strlen swap @foo memcpy drop
	0s @foo + -> (should eq 'H)
	1s @foo + -> (should eq 'a)
	2s @foo + -> (should eq 'i)
	3s @foo + -> (should eq 'l)
	4s @foo + -> (should eq  0x20)
	5s @foo + -> (should eq 'F)
	6s @foo + -> (should eq 'O)
	7s @foo + -> (should eq 'R)
	8s @foo + -> (should eq 'T)
	9s @foo + -> (should eq 'H)

	10s @foo + -> (should eq 'X)
])

#noreturn #dampe
(word panic (@U8 -- ) [
	"Panic: " print-string print-string nl
	0x40 .System/debug deo
	"Aborting.\n" print-string
	0x01 .System/state deo
	(asm "" .Op/Obrk)
])

#noreturn
(word panic (@U8 -- ) [
	"Panic: " print-string print-string nl
	.System/rst (asm "" .Op/Odei) 2 /
	(while [ 0> ] [
		"  at " print-string
		(wild ( -- U16) [ (asm "sr" .Op/Osth) ])
			print nl
		1-
	])
	"Aborting.\n" print-string
	0x01 .System/state deo
	drop
	(asm "" .Op/Obrk)
])
