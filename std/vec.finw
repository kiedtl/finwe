(use* core)
(use std)
(use alloc)
(use* varvara)

#private
(word unwrap-or-oom! ( (Of std/Maybe0 @Opaque) -- @Opaque ) [
	dup ;maybe-not? (when [
		"Out of memory!\n" print-string
		alloc/print-chunks
		"Please close a few Chrome tabs. Oh wait" std/panic
	]) :value
])

(struct Vector (Any)
	[capacity U16]
	[len U16]
	[items @[$0]]
)

(word init ( @(AnyOf Vector) -- ) [
	0s swap init-sized
])

(word init-sized ( U16 @(AnyOf Vector) -- ) [
	2dup :capacity <-
	0s over :len <-
	swap
	// ( vec* capacity )
	(sizeof (Child (FieldType (Child $0) items))) (as U16) *
		alloc/get unwrap-or-oom! (as @(Of Vector $0))
	// ( vec* items* )
	swap :items <-
])

#(method Vector)
(word add-return ( @(AnyOf Vector) -- @(Child (FieldType (Child $0) items)) ) [
	dup ;add-one ;last-ptr
])

#(method Vector)
(word append ( (Child (FieldType (Child $0) items)) @(AnyOf Vector) -- ) [
	dup :len -> 1+ over :len <-
	dup :len -> over ;ensure-capacity
	dup :len -> 1-
		(sizeof (Child (FieldType (Child $0) items))) (as U16) *
	swap :items -> + <-
])

#(method Vector)
(word last-ptr ( @(AnyOf Vector) -- @(Child (FieldType (Child $0) items)) ) [
	dup :items -> swap :len -> 1- :
	(as @(Child (FieldType (Child $0) items)))
])

#(method Vector)
(word last ( @(AnyOf Vector) -- (Child (FieldType (Child $0) items)) ) [
	;last-ptr ->
])

#(method Vector)
(word swap-remove ( U16 @(AnyOf Vector) -- (Child (FieldType (Child $0) items)) ) [
	2dup :len -> = (when [
		nip ;pop
	] [
		tuck :items -> :
		dup -> move       // ( vec &vec[ind] | vec[ind] )
		swap ;pop swap <-
		(r move)
	])
])

#(method Vector)
(word pop ( @(AnyOf Vector) -- (Child (FieldType (Child $0) items)) ) [
	dup ;last 1s rot ;shrink-by
])

#(method Vector)
(word add-one ( @(AnyOf Vector) -- ) [
	dup :len -> 1+ over :len <-
	dup :len -> over ;ensure-capacity
])

#(method Vector)
(word shrink-to ( U16 @(AnyOf Vector) -- ) [
	:len <-
])


#(method Vector)
(word shrink-by ( U16 @(AnyOf Vector) -- ) [
	tuck
	:len -> swap - // TODO: check for overflow
	// ( vec* new-len )
	swap :len <-
])

#(method Vector)
(word ensure-capacity ( U16 @(AnyOf Vector) -- ) [
	2dup :capacity -> over < (when [
		swap
		2dup :capacity <-
		swap (sizeof (Child (FieldType (Child $0) items))) (as U16) *
		// ( new-len vec* computed-size )
		over :items -> (as @Opaque) alloc/reget
		unwrap-or-oom! (as $0)
		// ( new-len vec* item* )
		swap :items <-
		drop
	] [ 2drop drop ])
])

#(method Vector)
(word deinit ( @(AnyOf Vector) -- ) [
	:items -> alloc/de
])

(test Vector/init-sized [
	alloc/init

	(let v1 (Of Vector U8))
	20s @v1 init-sized
	@v1 :len -> (should eq 0s)
	@v1 :capacity -> (should eq 20s)
	@v1 ;deinit

	(let v2 (Of Vector U16))
	10s @v2 init-sized
	@v2 :capacity -> (should eq 10s)
	@v2 ;deinit
])

(test Vector/append [
	alloc/init
	(let lst (Of Vector U16))
	@lst init

	   0x8s @lst ;append
	   314s @lst ;append
	   0x7s @lst ;append
	  1002s @lst ;append
	 0x184s @lst ;append

	@lst :items -> :4 -> (should eq 0x0184s)
	@lst :items -> :3 -> (should eq   1002s)
	@lst :items -> :2 -> (should eq    0x7s)
	@lst :items -> :1 -> (should eq    314s)
	@lst :items -> :0 -> (should eq    0x8s)
])

// It should shrink the len while retaining capacity.
(test Vector/shrink-by [
	alloc/init
	(let lst (Of Vector U16))
	@lst init

	1s @lst ;append
	2s @lst ;append
	3s @lst ;append
	4s @lst ;append

	2s @lst ;shrink-by

	@lst :len -> (should eq 2s)
	@lst :capacity -> (should eq 4s)
	0s @lst :items -> + -> (should eq 1s)
	2s @lst :items -> + -> (should eq 2s)
])

(test Vector/last [
	alloc/init
	(let lst (Of Vector U16))
	@lst init

	0x0008s @lst ;append
	@lst ;last (should eq 0x8s)
	0x0314s @lst ;append
	@lst ;last (should eq 0x314s)
	0x0007s @lst ;append
	@lst ;last (should eq 0x7s)
	0x1002s @lst ;append
	@lst ;last (should eq 0x1002s)
	0x0184s @lst ;append
	@lst ;last (should eq 0x184s)
])

(test Vector/pop [
	alloc/init
	(let lst (Of Vector U16))
	@lst init

	0x0008s @lst ;append
	0x0314s @lst ;append
	0x0007s @lst ;append
	0x1002s @lst ;append
	0x0184s @lst ;append

	@lst ;pop (should eq 0x0184s)
	@lst ;pop (should eq 0x1002s)
	@lst ;pop (should eq 0x0007s)
	@lst ;pop (should eq 0x0314s)
	@lst ;pop (should eq 0x0008s)
])

(test Vector/swap-remove [
	alloc/init
	(let lst (Of Vector U16))
	@lst init

	1s @lst ;append
	2s @lst ;append
	3s @lst ;append
	4s @lst ;append
	5s @lst ;append

	2s @lst ;swap-remove (should eq 3s)
	@lst :len -> (should eq 4s)

	3s @lst ;swap-remove (should eq 4s)
	@lst :len -> (should eq 3s)

	0s @lst ;swap-remove (should eq 1s)
	@lst :len -> (should eq 2s)
	0 @lst :items -> : -> (should eq 5s)
])
