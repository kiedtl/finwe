(use* core)
(use* varvara)
(use std)
(use dampe)

// I wanted to have U16 guards, that way we could have 0x1cedc0fe
//
// Sadly that blows up the size to 9 bytes, so we have to settle with
// just lukewarm 0xc0fe
//
#private
(struct Header
	[guard1 U8]
	[prev @Header]
	[next @Header]
	[free Bool]
	[guard2 U8]
)

(word first  (-- @Header) [ here (as @Header) ])

(word init ( -- ) [
	0s (as @Header)
		first :prev <-
	0xFFFFs (as @Header)
		first :next <-
	T       first :free <-
	0xc0    first :guard1 <-
	0xfe    first :guard2 <-
	first (sizeof Header) (as U16) dampe/protect
])

// ( block-count oldptr block-type -- (sizeof block-type)*block-count )
(word re ( U16 @$0 Type -- (Of std/Maybe0 @$0) ) [
	swap (sizeof $0) (as U16) * swap reget
	:value (make (Of std/Maybe0 @$0))
])

// ( block-count block-type -- (sizeof block-type)*block-count )
(word for ( U16 Type -- (Of std/Maybe0 @$0) ) [
	(sizeof $0) (as U16) * get
	:value (make (Of std/Maybe0 @$0))
])

// ( bytes -- *ptr )
(word get ( U16 -- (Of std/Maybe0 @Opaque) ) [
	(let size U16)
	@size <-

	first
	(while [
		dup :free -> not
		swap-sb chunk-size $size <
		or
	] [
		:next ->
		dup 0xFFFFs = (when [
			drop
			0s (as (Of std/Maybe0 @Opaque))
			return
		])
	])

	(let chosen @Header)
	@chosen <-
	dampe/priv-enter
		nil $chosen :free <-
		dampe/priv-exit

	$chosen chunk-size $size -
		(sizeof Header) (as U16) 1+
	< not (when [
		dampe/priv-enter

		(let next @Header)
		(sizeof Header) (as U16) $size $chosen + + @next <-

		$chosen          $next   :prev <-
		$chosen :next -> $next   :next <-
		T                $next   :free <-
		$next            $chosen :next -> :prev <-
		$next            $chosen :next <-
		0xc0             $next   :guard1 <-
		0xfe             $next   :guard2 <-
		$chosen dampe/assert-prot
		$next   (sizeof Header) (as U16) dampe/protect

		dampe/priv-exit
	])

	$chosen (sizeof Header) (as @Opaque) +
	(make (Of std/Maybe0 @Opaque))
])
(test alloc/alloc_dealloc_basic [
	init

	100s get ;unwrap
		dup 0 100s rot-sbs std/memset8
		de
	002s get ;unwrap
		dup (as @U16) 0xAAs -<
		de

	(let ptrs [@Opaque 100])
	100s (until [ 0= ] [
		100s get ;unwrap
		dup 0 100s rot-sbs std/memset8
		over @ptrs : <-
		1-
	]) drop
	100s (until [ 0= ] [
		dup @ptrs : -> de
		1-
	]) drop
])

// ( bytes oldptr -- Maybe<newptr> )
(word reget (U16 @Opaque -- (Of std/Maybe0 @Opaque)) [
	(as @U8)
	dup get-header chunk-size
	rot
	// ( old old-sz new-sz )
	tuck min swap
	// ( old min(old-sz,new-sz) new-sz )
	get :value dup 0= (when [ nip nip (make (Of std/Maybe0 @Opaque)) return ])
	// ( old min-sz new-unwrapped )
	rot copy swap
	// ( min-sz old new )
	(as @U8) std/memcpy (make (Of std/Maybe0 @Opaque))
	(r move) de
])
(test alloc/reget_copies_correctly [
	init

	"Foo"
	dup std/strlen tuck get ;unwrap (as @U8) std/memcpy
	100s swap reget ;unwrap (as @U8)
	dup "Foo" std/strequ (should eq t)

	1s swap reget ;unwrap (as @U8)
	dup :0 -> (should eq 'F)
	dup :1 -> (should eq 'o)
	drop
])

(word de (AnyPtr16 -- ) [
	dup get-header

	//dup     :guard1 -> 0xc0 <>
	//over-sb :guard2 -> 0xfe <> or
		//(when [ "Invalid pointer" error-dealloc ])
	dup :free ->
		(when [ "Double-free" error-dealloc ])

	dampe/priv-enter
		T swap-sb :free <-
		dampe/priv-exit
	drop
])

// ( chunk chunk-header error-string )
#private #noreturn
(word error-dealloc ( AnyPtr16 AnyPtr16 @[U8] -- ) [
	print-string ": " print-string
	swap print
	" (Header: " print-string print ")\n" print-string
	print-chunks
	"Deallocation error" std/panic
])

(word get-header (@Opaque -- @Header) [
	(sizeof Header) (as U16) - (as @Header)
])

(word chunk-size (@Header -- U16) [
	dup :next -> swap -
	(sizeof Header) (as U16) -
])

(word defrag (--) [
	first
	(until [ 0xFFFFs = ] [
		dup     :free ->
		over-sb :next -> :free -> and
		(when [
			dampe/priv-enter
			dup :next ->
			dup dampe/unprotect

			// current->next = next->next
			// ( current next )
			over :next
				// ( current next @current->next )
				over :next -> swap <-

			// ( current next )
			dup 0xFFFFs = (when [ "Assertion failed" std/panic ])

			// ( current next )
			:next ->
				// ( current $next->next )
				:prev
				// ( current $next->next->prev )
				over swap <-
				// ( current )

			dampe/priv-exit
		] [ :next -> ])
	]) drop
])

(word print-chunk (@Header -- ) [
	dup print " \t" print-string
	dup :free -> print-bool "\t" print-string
	dup :prev -> print " \t" print-string
	dup :next -> print " \t" print-string
	dup chunk-size print-dec "\t" print-string
	//dup :guard1 -> print "\t" print-string
	//dup :guard2 -> print
	nl
	drop
])

(word print-chunks (--) [
	"Chunk\tFree\tPrev\tNext\tSize\tG1\tG2\n" print-string

	first
	(until [ 0xFFFFs = ] [
		dup print-chunk
		:next ->
	]) drop

	nl
])

(word panic-oom (--) [
	"Out of memory!\n" print-string
	print-chunks
	"Please close a few Chrome tabs. Oh wait" std/panic
])

(test alloc/defrag [
	init
	
	(let ptrs [@Opaque 4])

	107s get ;unwrap drop
	107s get ;unwrap @ptrs :0 (as @@Opaque) <-
	10s  get ;unwrap @ptrs :1 (as @@Opaque) <-
	26s  get ;unwrap @ptrs :2 (as @@Opaque) <-
	2s   get ;unwrap drop
	30s  get ;unwrap drop
	30s  get ;unwrap @ptrs :3 (as @@Opaque) <-
	
	@ptrs :0 -> (as @Opaque) de
	@ptrs :1 -> (as @Opaque) de
	@ptrs :2 -> (as @Opaque) de
	@ptrs :3 -> (as @Opaque) de

	// XXX: will need to update if (sizeof Header) changes

	first
	dup :free -> (should eq nil) dup chunk-size (should eq 107s) :next ->
	dup :free -> (should eq t)   dup chunk-size (should eq 107s) :next ->
	dup :free -> (should eq t)   dup chunk-size (should eq  10s) :next ->
	dup :free -> (should eq t)   dup chunk-size (should eq  26s) :next ->
	dup :free -> (should eq nil) dup chunk-size (should eq   2s) :next ->
	dup :free -> (should eq nil) dup chunk-size (should eq  30s) :next ->
	dup :free -> (should eq t)   dup chunk-size (should eq  30s) :next ->
	dup :free -> (should eq t)
	:next -> (as U16) (should eq 0xFFFFs)

	defrag

	first
	dup :free -> (should eq nil) dup chunk-size (should eq 107s) :next ->
	dup :free -> (should eq t)   dup chunk-size (should eq 157s) :next ->
	dup :free -> (should eq nil) dup chunk-size (should eq   2s) :next ->
	dup :free -> (should eq nil) dup chunk-size (should eq  30s) :next ->
	dup :free -> (should eq t)
	:next -> (as U16) (should eq 0xFFFFs)
])
