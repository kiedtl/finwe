(use* core)

(device System 0x00
	[_unused   U16]
	[expansion U16] // @ExpansionCmd
	[wst        U8]
	[rst        U8]
	[metadata  U16] // @Metadata
	[r         U16]
	[g         U16]
	[b         U16]
	[debug      U8]
	[state      U8]
)

(enum ConsoleType U8 
	[no-queue   0]
	[stdin      1]
	[arg        2]
	[arg-spacer 3]
	[arg-end    4]
)

(device Console 0x10
	[vector @(Fn (U8 --))]
	[read               U8]
	[exec               U8]  // ? (not documented)
	[mode               U8]  // ? (not documented)
	[dead               U8]  // ? (not documented)
	[exit               U8]  // ? (not documented)
	[type      ConsoleType]
	[write              U8]  // stdout
	[error              U8]  // stderr
)

(device Screen 0x20
	[vector  @(Fn (--))]
	[width          U16]
	[height         U16]
	[auto          Bool]
	[_unused         U8]
	[x              U16]
	[y              U16]
	[addr           @U8]
	[pixel           U8]
	[sprite          U8]
)

(device Mouse 0x90
	[vector @(Fn (--))]
	[x             U16]
	[y             U16]
	[state          U8]

	[_unused1      U16]
	[_unused2       U8]

	[scrollx       U16]
	[scrollx       U16]

	[_unused3      U16]
)

(word dbg   (                  --              ) [ 0x1 .System/debug deo    ])
(word dei   (           AnyDev -- (USz $0)     ) [ (asm "g" .Op/Odei)       ])
(word deo   ((AnySz $0) AnyDev --              ) [ (asm "g" .Op/Odeo)       ])
(word emit  (             Any8 --              ) [ .Console/write deo       ])
(word nl    (                  --              ) [ 0x0a emit                ])
(word spc   (                  --              ) [ 0x20 emit                ])

(word print-string (@U8 -- ) [ ldak (while [ 0<> ] [ emit 1+ ldak ]) drop drop ])
(word print-bool (Bool -- ) [ (when [ "T" (as @U8) ] [ "nil" (as @U8) ]) print-string ])

(word print (Any --) [ 16 print-base ])
(word print-dec (Any --) [ 10 print-base ])

(word print-base (AnySigned U8 --) [
	move
	dup sign 0<> (when [
		"-" print-string
		abs
	] [ (as (USz $1)) ])
	(r move)
	print-base
])

(word print-base (Any U8 --) [
	(let base U8)
	@base <-

	dup 0= (when [ drop '0 emit return ])

	0x99 (as $1) swap // stop indicator

	(wild ($1 $1 -- $1) [
		(until [ 0= ] [
			$base (as $1) /mod
			dup 9 (as $1) > (when
				[ 10 (as $1) - 'a (as $1) + ]
				[ '0 (as $1) + ]
			)
			swap
		])

		drop // drop null byte
		(until [ 0x99 (as $1) = ] [ (as U8) emit ])
	])

	drop // drop stop indicator
])

(test print-dec [
	10   print-dec nl (should stdout-eq "10\n")
	20   print-dec nl (should stdout-eq "20\n")
	35   print-dec nl (should stdout-eq "35\n")
	99   print-dec nl (should stdout-eq "99\n")
	999s print-dec nl (should stdout-eq "999\n")
	0    print-dec nl (should stdout-eq "0\n")
])

(test print [
	0xbeefs print nl (should stdout-eq "beef\n")
	0x3b    print nl (should stdout-eq "3b\n")
	0x0d    print
	0xef    print
	0xaceds print
	0xcafes print nl (should stdout-eq "defacedcafe\n")
	0x0     print nl (should stdout-eq "0\n")
])

(test print_signed [
	   -1i  print-dec (should stdout-eq "-1")
	    0i  print-dec (should stdout-eq "0")
	    1i  print-dec (should stdout-eq "1")
	 -199is print-dec (should stdout-eq "-199")
	   -1is print-dec (should stdout-eq "-1")
	    0is print-dec (should stdout-eq "0")
	 2819is print-dec (should stdout-eq "2819")
	-2819is print-dec (should stdout-eq "-2819")
])

(test print-string [
	"\n\n\0" print-string (should stdout-eq "\n\n")
	"All hail the Emperor" print-string (should stdout-eq "All hail the Emperor")
])
